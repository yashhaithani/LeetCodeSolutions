
// class Solution {
//     static int START=0, END=1, VALUE=2;

//     public int maxTwoEvents(int[][] events) {

//         // sort the 2d array according to start time 
//         Arrays.sort(events, (a,b)->a[START]-b[START]);
//         int maxValue= 0, n= events.length;

//         // create a treemap and add the max value interval in it 
//         TreeMap<Integer,Integer> sMax= new TreeMap<>();
//         for(int i=n-1; i>=0; i--)
//             if(events[i][VALUE]>maxValue)
//                 sMax.put(events[i][START], maxValue= events[i][VALUE]);


//         int maxTwo= 0;
//         for(int[] e:events){
//             Map.Entry<Integer,Integer> maxOne= sMax.ceilingEntry(e[END]+1);
//             maxTwo= Math.max(maxTwo, e[VALUE] + (maxOne!=null ? maxOne.getValue() : 0));
//         }
//         return maxTwo;
//     }
// }
class Solution {
    public int maxTwoEvents(int[][] events) 
    {
        long[] start = new long[events.length], end = new long[events.length];
        for(int i = 0; i < events.length; i++)
        {
            long startValue = ((long) events[i][0] << 32) | (0xFFFF_FFFFL & i);
            long endValue = ((long) (events[i][1]+1) << 32) | (0xFFFF_FFFFL & i);
            start[i] = startValue;
            end[i] = endValue;
        }
        Arrays.sort(start);
        Arrays.sort(end);
        // for (int[] a : events) System.out.println(Arrays.toString(a));
        int last = 0, sum = 0;
        // int[][] starts = new int[start.length][];
        // int[][] ends = new int[start.length][];
        for(int i = 0, j = 0; i < events.length && j < events.length;)
        {
            int startTime = (int)((start[i] >> 32) & 0xFFFF_FFFFL);
            int startIdx = (int)(start[i] & 0xFFFF_FFFFL);
            int endTime = (int)((end[j] >> 32) & 0xFFFF_FFFFL);
            int endIdx = (int)(end[j] & 0xFFFF_FFFFL);
            if(startTime < endTime)
            {
                sum = Math.max(sum, last + events[startIdx][2]);
                ++i;
            }else{
                
                last = Math.max(last, events[endIdx][2]);
                ++j;
            }
            // starts[i] = new int[] {startTime, startIdx};
            // ends[i] = new int[] {endTime, endIdx};
        }
        // System.out.println("---------------------------------------------");
        // for (int[] a : starts) System.out.println(Arrays.toString(a));
        // System.out.println("---------------------------------------------");
        // for (int[] a : ends) System.out.println(Arrays.toString(a));
        return sum;
    }
}
