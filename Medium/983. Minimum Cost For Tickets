class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int dp[]=new int[days.length];
        Arrays.fill(dp,-1);
        return chooseMin(0, days, costs,dp);
    }

    public int chooseMin(int i, int[] days, int[] costs,int dp[]) {
        if (i >= days.length) {
            return 0;
        }
       if(dp[i]!=-1){
        return dp[i];
       }
        int cost1 = costs[0] + chooseMin(i + 1, days, costs,dp);
        int j = i;
        while (j < days.length && days[j] < days[i] + 7) {
            j++;
        }
        int cost7 = costs[1] + chooseMin(j, days, costs,dp);
        int k = i;
        while (k < days.length && days[k] < days[i] + 30) {
            k++;
        }
        int cost30 = costs[2] + chooseMin(k, days, costs,dp);
        return dp[i]= Math.min(cost1, Math.min(cost7, cost30));
    }
}
