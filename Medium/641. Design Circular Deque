class MyCircularDeque {
    static Deque<Integer> d;
    static int size;
    public MyCircularDeque(int k) {
        d = new LinkedList<>();
        size = k;
    }
    
    public boolean insertFront(int value) {
        if(d.size() < size){
            d.addFirst(value);
            return true;
        }
        return false;
    }
    
    public boolean insertLast(int value) {
        if(d.size() < size){
            d.addLast(value);
            return true;
        }
        return false;
    }
    
    public boolean deleteFront() {
        if(d.size() > 0){
            d.removeFirst();
            return true;
        }
        return false;
    }
    
    public boolean deleteLast() {
        if(d.size() > 0){
            d.removeLast();
            return true;
        }
        return false;
    }
    
    public int getFront() {
        if(d.size() <= 0){
            return -1;
        }
        return d.getFirst();
    }
    
    public int getRear() {
        if(d.size() <= 0){
            return -1;
        }
        return d.getLast();
    }
    
    public boolean isEmpty() {
        if(d.size() == 0){
            return true;
        }
        return false;
    }
    
    public boolean isFull() {
        if(d.size() == size){
            return true;
        }
        return false;
    }
}
