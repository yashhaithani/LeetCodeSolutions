class Solution {

    public String solve(char[] str1, char[] str2){
        int n = str1.length;
        int[][] dp = new int[n+1][n+1];
        int maxLength = 0;
        int endIndex = 0;

        for(int i=1; i<=n; i++){
            for(int j=1; j<=n; j++){
                if(str1[i-1] == str2[j-1]) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                    if (dp[i][j] > maxLength) {
                        int start = n - j; 
                        if (start + dp[i][j] == i) { 
                            maxLength = dp[i][j];
                            endIndex = i;
                        }
                    }
                } else {
                    dp[i][j] = 0;
                }
            }
        }

        if (maxLength == 0) return "";
        return new String(str1, endIndex - maxLength, maxLength);
    }

    public String longestPalindrome(String s) {
        return solve(s.toCharArray(), new StringBuilder(s).reverse().toString().toCharArray());
    }
}
